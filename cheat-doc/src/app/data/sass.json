{
  "title": "React",
  "snippets": [
    {
      "section": "Getting Started",
      "cards": [
        {
          "title": "Hello World Component",
          "code": "import React from 'react';\n\nfunction App() {\n  return <h1>Hello, World!</h1>;\n}\n\nexport default App;",
          "description": "Basic functional component in React."
        },
        {
          "title": "JSX Syntax",
          "code": "const element = <h1 className=\"title\">Welcome</h1>;",
          "description": "JSX lets you write HTML inside JavaScript."
        }
      ]
    },
    {
      "section": "Props & State",
      "cards": [
        {
          "title": "Passing Props",
          "code": "function Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}",
          "description": "Props are passed from parent to child components."
        },
        {
          "title": "useState Hook",
          "code": "import { useState } from 'react';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount(count + 1)}>{count}</button>;\n};"
        }
      ]
    },
    {
      "section": "useEffect Hook",
      "cards": [
        {
          "title": "Basic useEffect",
          "code": "import { useEffect } from 'react';\n\nuseEffect(() => {\n  console.log('Component mounted');\n}, []);"
        },
        {
          "title": "Effect with Cleanup",
          "code": "useEffect(() => {\n  const id = setInterval(() => console.log('tick'), 1000);\n  return () => clearInterval(id);\n}, []);"
        }
      ]
    },
    {
      "section": "Event Handling",
      "cards": [
        {
          "title": "Click Event",
          "code": "function Button() {\n  const handleClick = () => alert('Clicked');\n  return <button onClick={handleClick}>Click Me</button>;\n}"
        },
        {
          "title": "Form Submit",
          "code": "function Form() {\n  const handleSubmit = e => {\n    e.preventDefault();\n    alert('Form submitted');\n  };\n  return <form onSubmit={handleSubmit}><button type=\"submit\">Submit</button></form>;\n}"
        }
      ]
    },
    {
      "section": "Conditional Rendering",
      "cards": [
        {
          "title": "Ternary Operator",
          "code": "const isLoggedIn = true;\nreturn <div>{isLoggedIn ? 'Welcome!' : 'Please sign in'}</div>;"
        },
        {
          "title": "Logical AND",
          "code": "const messages = [];\nreturn <div>{messages.length > 0 && 'You have messages'}</div>;"
        }
      ]
    },
    {
      "section": "Lists & Keys",
      "cards": [
        {
          "title": "Rendering Lists",
          "code": "const items = ['a', 'b', 'c'];\nreturn <ul>{items.map(item => <li key={item}>{item}</li>)}</ul>;"
        }
      ]
    },
    {
      "section": "Custom Components & Props",
      "cards": [
        {
          "title": "Reusable Button",
          "code": "function Button({ children, onClick }) {\n  return <button onClick={onClick}>{children}</button>;\n}"
        }
      ]
    },
    {
      "section": "useRef Hook",
      "cards": [
        {
          "title": "Accessing DOM Elements",
          "code": "import { useRef, useEffect } from 'react';\n\nfunction FocusInput() {\n  const inputRef = useRef();\n  useEffect(() => inputRef.current.focus(), []);\n  return <input ref={inputRef} />;\n}"
        }
      ]
    },
    {
      "section": "React Router (v6+)",
      "cards": [
        {
          "title": "Basic Routing",
          "code": "import { BrowserRouter, Routes, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/about\" element={<About />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}"
        }
      ]
    },
    {
      "section": "Context API",
      "cards": [
        {
          "title": "Create & Use Context",
          "code": "const ThemeContext = React.createContext('light');\n\nfunction App() {\n  return (\n    <ThemeContext.Provider value=\"dark\">\n      <Toolbar />\n    </ThemeContext.Provider>\n  );\n}"
        },
        {
          "title": "Consume Context",
          "code": "const theme = useContext(ThemeContext);\nreturn <div>Theme is {theme}</div>;"
        }
      ]
    }
  ]
}
